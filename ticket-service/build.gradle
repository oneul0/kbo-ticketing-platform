plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.boeingmerryho.business'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.1")
	set('querydslVersion', "5.0.0")
}

dependencies {
	// Common
	implementation 'io.github.boeingmerryho:common-library:1.1.2'

	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	// GCP Logging
	implementation 'com.google.cloud:spring-cloud-gcp-logging:6.1.0'
	implementation 'com.google.cloud:spring-cloud-gcp-starter:6.1.0'

	// Kafka
	implementation 'org.springframework.kafka:spring-kafka'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// Resilience4j
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// map struct
	implementation "org.mapstruct:mapstruct:1.5.5.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"

	// MySql
	runtimeOnly 'com.mysql:mysql-connector-j'

	// querydsl
	implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Prometheus
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
	main {
		java {
			srcDir querydslDir
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.generatedSourceOutputDirectory = querydslDir
}
